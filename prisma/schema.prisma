// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       Int     @id @default(autoincrement())
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?

    userId Int  @map("user_id")
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Session {
    id Int @id @default(autoincrement())

    expires   DateTime
    createdAt DateTime @default(now()) @map("created_at")

    sessionToken String @unique @map("session_token")

    userId Int  @map("user_id")
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([expires])
    @@index([createdAt])
    @@map("sessions")
}

model User {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    email         String?   @unique
    firstName     String    @map("first_name")
    lastName      String    @map("last_name")
    emailVerified DateTime? @map("email_verified")
    image         String?

    accounts          Account[]
    sessions          Session[]
    userSystemRoles   UserSystemRole[]
    organizationUsers OrganizationUser[]

    @@index([createdAt])
    @@index([deletedAt])
    @@map("users")
}

model UserSystemRole {
    userId Int        @map("user_id")
    user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId Int        @map("role_id")
    role   SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
    @@index(roleId)
    @@map("users_roles")
}

model SystemRole {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name        String  @unique
    description String?

    rolePermissions SystemRolePermission[]
    userSystemRoles UserSystemRole[]

    @@index([createdAt])
    @@map("system_roles")
}

model SystemRolePermission {
    roleId       Int @map("role_id")
    permissionId Int @map("permission_id")

    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    role       SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([roleId, permissionId])
    @@index(permissionId)
    @@map("system_roles_permissions")
}

model OrganizationUserRole {
    userId         Int @map("user_id")
    organizationId Int @map("organization_id")
    roleId         Int @map("role_id")

    organizationUser OrganizationUser @relation(fields: [organizationId, userId], references: [organizationId, userId], onDelete: Cascade)
    role             OrganizationRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([organizationId, userId, roleId])
    @@index(userId)
    @@index(roleId)
    @@map("organizations_users_roles")
}

model OrganizationRole {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name        String
    color       String  @default("skyfall")
    description String?

    organizationId Int          @map("organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id])

    rolePermissions        OrganizationRolePermission[]
    organizationUsersRoles OrganizationUserRole[]

    @@unique([organizationId, name])
    @@index([createdAt])
    @@map("organizations_roles")
}

model OrganizationRolePermission {
    organizationId Int @map("organization_id")
    roleId         Int @map("role_id")
    permissionId   Int @map("permission_id")

    permission Permission       @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    role       OrganizationRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([organizationId, roleId, permissionId])
    @@index(roleId)
    @@index(permissionId)
    @@map("organizations_roles_permissions")
}

model Permission {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name        String  @unique
    description String?

    rolePermissions             SystemRolePermission[]
    organizationRolePermissions OrganizationRolePermission[]

    @@index([createdAt])
    @@map("permissions")
}

model OrganizationUser {
    userId         Int @map("user_id")
    organizationId Int @map("organization_id")

    joinedAt DateTime @default(now()) @map("joined_at")

    user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization          Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationUserRoles OrganizationUserRole[]

    @@id([organizationId, userId])
    @@index(userId)
    @@map("organizations_users")
}

model Invite {
    token String @id @default(uuid())

    createdAt DateTime @default(now()) @map("created_at")
    expiresAt DateTime @map("expires_at")

    email String

    organizationId Int          @map("organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@index([createdAt])
    @@index([email])
    @@map("invites")
}

model Organization {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name  String  @unique
    image String?

    organizationUsers     OrganizationUser[]
    organizationTemplates OrganizationTemplate[]
    createdTemplates      Template[]
    customComponents      CustomComponent[]
    inviteTokens          Invite[]
    organizationRoles     OrganizationRole[]

    @@index([createdAt])
    @@map("organizations")
}

model OrganizationTemplate {
    organizationId Int @map("organization_id")
    templateId     Int @map("template_id")

    organization Organization @relation(fields: [organizationId], references: [id])
    template     Template     @relation(fields: [templateId], references: [id])
    templateName String       @map("template_name") // 
    domains      Domain[]

    @@id([organizationId, templateId])
    @@unique([organizationId, templateName])
    @@index(templateId)
    @@map("organizations_templates")
}

model Template {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name        String
    isPublic    Boolean @map("is_public")
    description String?
    type        String

    createdByOrganizationId Int          @map("created_by_organization_id")
    createdByOrganization   Organization @relation(fields: [createdByOrganizationId], references: [id])

    organizationTemplates OrganizationTemplate[]
    tags                  TemplateTag[]
    versions              Version[]

    @@index([isPublic])
    @@map("templates")
}

model Version {
    id BigInt @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    version     String @unique
    description String

    templateId      Int       @map("template_id")
    template        Template  @relation(fields: [templateId], references: [id])
    pages           Page[]
    parentVersionId BigInt?   @map("parent_version_id")
    parentVersion   Version?  @relation(name: "VersionToVersion", fields: [parentVersionId], references: [id], onDelete: SetNull, onUpdate: NoAction)
    versions        Version[] @relation(name: "VersionToVersion")

    @@index([createdAt])
    @@index([deletedAt])
    @@map("versions")
}

model TemplateTag {
    templateId Int @map("template_id")
    tagId      Int @map("tag_id")

    template Template @relation(fields: [templateId], references: [id])
    tag      Tag      @relation(fields: [tagId], references: [id])

    @@id([templateId, tagId])
    @@index([tagId])
    @@map("template_tags")
}

model Tag {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now()) @map("created_at")

    templateTags TemplateTag[]

    @@index([createdAt])
    @@map("tags")
}

model Domain {
    id Int @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    domain      String
    displayName String @map("display_name")
    httpStatus  Int?   @map("http_status")

    organizationId       Int                  @map("organization_id")
    templateId           Int                  @map("template_id")
    organizationTemplate OrganizationTemplate @relation(fields: [organizationId, templateId], references: [organizationId, templateId])

    @@unique([organizationId, domain])
    @@unique([organizationId, templateId])
    @@index([domain])
    @@index([createdAt])
    @@index([deletedAt])
    @@map("domains")
}

model Page {
    id BigInt @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    pageName String @map("page_name")
    pagePath String @map("page_path")
    pageType String @map("page_type")

    versionId  BigInt      @map("version_id")
    version    Version     @relation(fields: [versionId], references: [id])
    components Component[]

    @@index([createdAt])
    @@map("pages")
}

model Component {
    id BigInt @id @default(autoincrement())

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    type               ComponentTypeEnum
    className          String?           @map("class_name") // tailwind classes as a string
    color              String?
    disabled           String? // can write any script that returns a boolean.  {{true}} or {{false}} or {{currentInput.value === 'someValue'}}, etc.
    html               String?
    htmlId             String?           @map("html_id")
    icon               String?
    leftSection        String?           @map("left_section")
    loading            String? // can write any script that returns a boolean.  {{true}} or {{false}} or {{currentInput.value === 'someValue'}}, etc.
    onRenderScript     String?           @map("on_render_script") // write any script with mustache syntax
    radius             MantineSizeEnum?
    rightSection       String?           @map("right_section")
    size               MantineSizeEnum?
    shouldRenderScript String?           @map("should_render_script")

    buttonActionScript String?                   @map("button_action_script") // write any script with mustache syntax
    buttonFullWidth    Boolean?                  @map("button_full_width")
    buttonText         String?                   @map("button_text")
    buttonVariant      MantineButtonVariantEnum? @map("button_variant")

    imageAlt    String? @map("image_alt")
    imageHeight Int?    @map("image_height")
    imageWidth  Int?    @map("image_width")
    imageSrc    String? @map("image_src")

    pageId                  BigInt                    @map("page_id")
    page                    Page                      @relation(fields: [pageId], references: [id])
    parentComponentId       BigInt?                   @map("parent_component_id")
    parentComponent         Component?                @relation(name: "ComponentToComponent", fields: [parentComponentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
    components              Component[]               @relation(name: "ComponentToComponent")
    customComponentInstance CustomComponentInstance[]

    @@index([createdAt])
    @@index([type])
    @@map("components")
}

model CustomComponent {
    id BigInt @id @default(autoincrement())

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    name        String
    description String?
    type        String
    jsx         String

    organizationId Int          @map("organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id])

    instances CustomComponentInstance[]
    props     CustomComponentProp[]

    @@index([createdAt])
    @@map("custom_components")
}

model CustomComponentProp {
    key  String
    type CustomComponentPropTypeEnum

    customComponentId BigInt          @map("custom_component_id")
    customComponent   CustomComponent @relation(fields: [customComponentId], references: [id])

    instances CustomComponentInstanceProp[]

    @@id([customComponentId, key])
    @@map("custom_components_props")
}

model CustomComponentInstance {
    customComponentId BigInt @map("custom_component_id")
    componentId       BigInt @unique @map("component_id") // ensures that a component can only have one instance of a custom component

    component       Component                     @relation(fields: [componentId], references: [id])
    customComponent CustomComponent               @relation(fields: [customComponentId], references: [id])
    instanceProps   CustomComponentInstanceProp[]

    @@id([customComponentId, componentId])
    @@map("custom_components_instances")
}

model CustomComponentInstanceProp {
    key   String
    value String

    customComponentId BigInt @map("custom_component_id")
    componentId       BigInt @unique @map("component_id")

    customComponentProp     CustomComponentProp     @relation(fields: [customComponentId, key], references: [customComponentId, key])
    customComponentInstance CustomComponentInstance @relation(fields: [customComponentId, componentId], references: [customComponentId, componentId])

    @@id([customComponentId, componentId, key])
    @@map("custom_components_instances_props")
}

enum CustomComponentPropTypeEnum {
    string
    number
    boolean
    object
    array
    function
    component
    any
}

enum ComponentTypeEnum {
    button
    div
    icon
    image
    html
    link
    custom
}

enum MantineSizeEnum {
    xs
    sm
    md
    lg
    xl
}

enum MantineButtonVariantEnum {
    default
    filled
    light
    outline
    subtle
    transparent
    white
}
